// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package timing

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE672cca2DecodeGithubComImSingeeTiming(in *jlexer.Lexer, out *TimeEntriesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]Task, 0, 1)
					} else {
						out.Data = []Task{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Task
					easyjsonE672cca2DecodeGithubComImSingeeTiming1(in, &v1)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "links":
			easyjsonE672cca2DecodeGithubComImSingeeTiming2(in, &out.Links)
		case "meta":
			easyjsonE672cca2Decode(in, &out.Meta)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE672cca2EncodeGithubComImSingeeTiming(out *jwriter.Writer, in TimeEntriesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonE672cca2EncodeGithubComImSingeeTiming1(out, v3)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"links\":"
		out.RawString(prefix)
		easyjsonE672cca2EncodeGithubComImSingeeTiming2(out, in.Links)
	}
	{
		const prefix string = ",\"meta\":"
		out.RawString(prefix)
		easyjsonE672cca2Encode(out, in.Meta)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TimeEntriesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE672cca2EncodeGithubComImSingeeTiming(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TimeEntriesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE672cca2EncodeGithubComImSingeeTiming(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TimeEntriesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE672cca2DecodeGithubComImSingeeTiming(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TimeEntriesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE672cca2DecodeGithubComImSingeeTiming(l, v)
}
func easyjsonE672cca2Decode(in *jlexer.Lexer, out *struct {
	CurrentPage int    `json:"current_page"`
	From        int    `json:"from"`
	LastPage    int    `json:"last_page"`
	Path        string `json:"path"`
	PerPage     int    `json:"per_page"`
	To          int    `json:"to"`
	Total       int    `json:"total"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "current_page":
			out.CurrentPage = int(in.Int())
		case "from":
			out.From = int(in.Int())
		case "last_page":
			out.LastPage = int(in.Int())
		case "path":
			out.Path = string(in.String())
		case "per_page":
			out.PerPage = int(in.Int())
		case "to":
			out.To = int(in.Int())
		case "total":
			out.Total = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE672cca2Encode(out *jwriter.Writer, in struct {
	CurrentPage int    `json:"current_page"`
	From        int    `json:"from"`
	LastPage    int    `json:"last_page"`
	Path        string `json:"path"`
	PerPage     int    `json:"per_page"`
	To          int    `json:"to"`
	Total       int    `json:"total"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"current_page\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CurrentPage))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.Int(int(in.From))
	}
	{
		const prefix string = ",\"last_page\":"
		out.RawString(prefix)
		out.Int(int(in.LastPage))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"per_page\":"
		out.RawString(prefix)
		out.Int(int(in.PerPage))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.Int(int(in.To))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int(int(in.Total))
	}
	out.RawByte('}')
}
func easyjsonE672cca2DecodeGithubComImSingeeTiming2(in *jlexer.Lexer, out *Links) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first":
			out.First = string(in.String())
		case "last":
			out.Last = string(in.String())
		case "prev":
			if m, ok := out.Prev.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Prev.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Prev = in.Interface()
			}
		case "next":
			if m, ok := out.Next.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Next.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Next = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE672cca2EncodeGithubComImSingeeTiming2(out *jwriter.Writer, in Links) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first\":"
		out.RawString(prefix[1:])
		out.String(string(in.First))
	}
	{
		const prefix string = ",\"last\":"
		out.RawString(prefix)
		out.String(string(in.Last))
	}
	{
		const prefix string = ",\"prev\":"
		out.RawString(prefix)
		if m, ok := in.Prev.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Prev.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Prev))
		}
	}
	{
		const prefix string = ",\"next\":"
		out.RawString(prefix)
		if m, ok := in.Next.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Next.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Next))
		}
	}
	out.RawByte('}')
}
func easyjsonE672cca2DecodeGithubComImSingeeTiming1(in *jlexer.Lexer, out *Task) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "self":
			out.Self = string(in.String())
		case "start_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartDate).UnmarshalJSON(data))
			}
		case "end_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndDate).UnmarshalJSON(data))
			}
		case "duration":
			out.Duration = int(in.Int())
		case "project":
			easyjsonE672cca2DecodeGithubComImSingeeTiming3(in, &out.Project)
		case "title":
			out.Title = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "is_running":
			out.IsRunning = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE672cca2EncodeGithubComImSingeeTiming1(out *jwriter.Writer, in Task) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"self\":"
		out.RawString(prefix[1:])
		out.String(string(in.Self))
	}
	{
		const prefix string = ",\"start_date\":"
		out.RawString(prefix)
		out.Raw((in.StartDate).MarshalJSON())
	}
	{
		const prefix string = ",\"end_date\":"
		out.RawString(prefix)
		out.Raw((in.EndDate).MarshalJSON())
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"project\":"
		out.RawString(prefix)
		easyjsonE672cca2EncodeGithubComImSingeeTiming3(out, in.Project)
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"notes\":"
		out.RawString(prefix)
		out.String(string(in.Notes))
	}
	{
		const prefix string = ",\"is_running\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRunning))
	}
	out.RawByte('}')
}
func easyjsonE672cca2DecodeGithubComImSingeeTiming3(in *jlexer.Lexer, out *Project) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "self":
			out.Self = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "title_chain":
			if in.IsNull() {
				in.Skip()
				out.TitleChain = nil
			} else {
				in.Delim('[')
				if out.TitleChain == nil {
					if !in.IsDelim(']') {
						out.TitleChain = make([]string, 0, 4)
					} else {
						out.TitleChain = []string{}
					}
				} else {
					out.TitleChain = (out.TitleChain)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.TitleChain = append(out.TitleChain, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "color":
			out.Color = string(in.String())
		case "productivity_score":
			out.ProductivityScore = int(in.Int())
		case "is_archived":
			out.IsArchived = bool(in.Bool())
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(Project)
				}
				easyjsonE672cca2DecodeGithubComImSingeeTiming3(in, out.Parent)
			}
		case "children":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				if out.Children == nil {
					out.Children = new(Project)
				}
				easyjsonE672cca2DecodeGithubComImSingeeTiming3(in, out.Children)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE672cca2EncodeGithubComImSingeeTiming3(out *jwriter.Writer, in Project) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"self\":"
		out.RawString(prefix[1:])
		out.String(string(in.Self))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"title_chain\":"
		out.RawString(prefix)
		if in.TitleChain == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.TitleChain {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"productivity_score\":"
		out.RawString(prefix)
		out.Int(int(in.ProductivityScore))
	}
	{
		const prefix string = ",\"is_archived\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsArchived))
	}
	{
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		if in.Parent == nil {
			out.RawString("null")
		} else {
			easyjsonE672cca2EncodeGithubComImSingeeTiming3(out, *in.Parent)
		}
	}
	{
		const prefix string = ",\"children\":"
		out.RawString(prefix)
		if in.Children == nil {
			out.RawString("null")
		} else {
			easyjsonE672cca2EncodeGithubComImSingeeTiming3(out, *in.Children)
		}
	}
	out.RawByte('}')
}
